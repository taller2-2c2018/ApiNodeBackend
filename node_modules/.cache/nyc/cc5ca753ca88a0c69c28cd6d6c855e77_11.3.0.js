var cov_gomvxoi04=function(){var path='/usr/src/routes/v0/api/servers.js',hash='af4324faf6a85941a0cc8b70913543ed6509a68c',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/usr/src/routes/v0/api/servers.js',statementMap:{'0':{start:{line:1,column:16},end:{line:1,column:34}},'1':{start:{line:2,column:15},end:{line:2,column:31}},'2':{start:{line:3,column:25},end:{line:3,column:73}},'3':{start:{line:4,column:23},end:{line:4,column:68}},'4':{start:{line:5,column:20},end:{line:5,column:40}},'5':{start:{line:7,column:25},end:{line:7,column:69}},'6':{start:{line:10,column:0},end:{line:10,column:78}},'7':{start:{line:18,column:0},end:{line:18,column:80}},'8':{start:{line:21,column:0},end:{line:21,column:67}},'9':{start:{line:28,column:0},end:{line:28,column:70}},'10':{start:{line:31,column:0},end:{line:31,column:69}},'11':{start:{line:34,column:0},end:{line:34,column:73}},'12':{start:{line:39,column:0},end:{line:39,column:23}}},fnMap:{},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0},f:{},b:{},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const express=(cov_gomvxoi04.s[0]++,require('express'));const router=(cov_gomvxoi04.s[1]++,express.Router());const serverController=(cov_gomvxoi04.s[2]++,require('../../../controllers/serverController'));const authMiddleware=(cov_gomvxoi04.s[3]++,require('../../../routes/v0/auth/middleware'));const{withError}=(cov_gomvxoi04.s[4]++,require('./helpers'));let validateLoggedUser=(cov_gomvxoi04.s[5]++,authMiddleware.checkIsLoggedWithPermission());// Devuelve toda la información acerca de todos los application servers indicados.
cov_gomvxoi04.s[6]++;router.get('/',validateLoggedUser,withError(serverController.v0.listServers));// Endpoint para dar de alta un servidor. Se ignorarán los campos de id, _rev y lastConnection
/* parametros:
  "createdBy": "string",
  "createdTime": 0,
  "name": "string",
*/cov_gomvxoi04.s[7]++;router.post('/',validateLoggedUser,withError(serverController.v0.createServer));// Obtiene toda la información del servidor
cov_gomvxoi04.s[8]++;router.get('/:server_id',withError(serverController.v0.getServer));// Modificación de los datos de un servidor. Se ignorarán los campos de id, createdBy, createdTime y lastConnection
/* Parametros posibles:
  "_rev": "string",
  "name": "string",
*/cov_gomvxoi04.s[9]++;router.put('/:server_id',withError(serverController.v0.updateserver));// Endpoint para resetear el token. Debe invalidar el anterior. 
cov_gomvxoi04.s[10]++;router.post('/:server_id',withError(serverController.v0.resetToken));// Endpoint para dar de baja un servidor
cov_gomvxoi04.s[11]++;router.delete('/:server_id',withError(serverController.v0.deleteServer));cov_gomvxoi04.s[12]++;module.exports=router;