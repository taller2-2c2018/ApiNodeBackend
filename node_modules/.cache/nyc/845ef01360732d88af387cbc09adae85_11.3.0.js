'use strict';var cov_zh1l6b3hz=function(){var path='/usr/src/routes/v0/api/helpers.js',hash='1c0a7d7c961e46eb788a0a11afb14f5e824f42c8',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/usr/src/routes/v0/api/helpers.js',statementMap:{'0':{start:{line:2,column:27},end:{line:2,column:61}},'1':{start:{line:3,column:18},end:{line:3,column:52}},'2':{start:{line:7,column:0},end:{line:14,column:1}},'3':{start:{line:7,column:33},end:{line:14,column:1}},'4':{start:{line:8,column:2},end:{line:13,column:3}},'5':{start:{line:9,column:4},end:{line:9,column:27}},'6':{start:{line:11,column:4},end:{line:11,column:29}},'7':{start:{line:12,column:4},end:{line:12,column:56}},'8':{start:{line:18,column:0},end:{line:26,column:1}},'9':{start:{line:19,column:17},end:{line:19,column:38}},'10':{start:{line:20,column:2},end:{line:24,column:3}},'11':{start:{line:21,column:4},end:{line:23,column:97}},'12':{start:{line:25,column:2},end:{line:25,column:8}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:7,column:20},end:{line:7,column:21}},loc:{start:{line:7,column:33},end:{line:14,column:1}},line:7},'1':{name:'(anonymous_1)',decl:{start:{line:7,column:33},end:{line:7,column:34}},loc:{start:{line:7,column:52},end:{line:14,column:1}},line:7},'2':{name:'(anonymous_2)',decl:{start:{line:18,column:37},end:{line:18,column:38}},loc:{start:{line:18,column:57},end:{line:26,column:1}},line:18}},branchMap:{'0':{loc:{start:{line:20,column:2},end:{line:24,column:3}},type:'if',locations:[{start:{line:20,column:2},end:{line:24,column:3}},{start:{line:20,column:2},end:{line:24,column:3}}],line:20}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0},f:{'0':0,'1':0,'2':0},b:{'0':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const{validationResult}=(cov_zh1l6b3hz.s[0]++,require('express-validator/check'));const responser=(cov_zh1l6b3hz.s[1]++,require('../../../util/responser'));// Usada como wrapper para el manejo de errores basicos de un request
// asyncronico
cov_zh1l6b3hz.s[2]++;exports.withError=handler=>{cov_zh1l6b3hz.f[0]++;cov_zh1l6b3hz.s[3]++;return async(req,res)=>{cov_zh1l6b3hz.f[1]++;cov_zh1l6b3hz.s[4]++;try{cov_zh1l6b3hz.s[5]++;await handler(req,res);}catch(e){cov_zh1l6b3hz.s[6]++;res.statusCode=e.status;cov_zh1l6b3hz.s[7]++;res.json(responser.createResponse(e.status,e,null));}};};/* Se debe utilizar como middleware en caso de que la ruta tenga validaciones con express-validator
*/cov_zh1l6b3hz.s[8]++;exports.expressValidatorMiddleware=(req,res,next)=>{cov_zh1l6b3hz.f[2]++;const errors=(cov_zh1l6b3hz.s[9]++,validationResult(req));cov_zh1l6b3hz.s[10]++;if(!errors.isEmpty()){cov_zh1l6b3hz.b[0][0]++;cov_zh1l6b3hz.s[11]++;return res.status(responser.codes.UNPROCESSABLE_ENTITY).json(responser.createResponse(responser.codes.UNPROCESSABLE_ENTITY,errors.mapped(),null));}else{cov_zh1l6b3hz.b[0][1]++;}cov_zh1l6b3hz.s[12]++;next();};